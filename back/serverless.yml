service: time-tracker

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - test
      - dev
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    USERS_DYNAMODB_TABLE: users-${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*/index/byDate"

functions:
  signUp:
    handler: src/users/createUser.handler
    events:
      - http:
          path: users
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(models/create-user.json)}
  login:
    handler: src/users/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(models/login-user.json)}

  refreshToken:
    handler: src/users/refreshToken.handler
    events:
      - http:
          path: refreshToken
          method: post
          cors: true

  authEcho:
    handler: src/users/me.handler
    events:
      - http:
          path: me
          method: get
          cors: true

  createSession:
    handler: src/sessions/createSession.handler
    events:
      - http:
          path: sessions
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(models/create-session.json)}

  listSessions:
    handler: src/sessions/listSessions.handler
    events:
      - http:
          path: sessions
          method: get
          cors: true

  updateSessionn:
    handler: src/sessions/updateSession.handler
    events:
      - http:
          path: sessions/{id}
          method: patch
          cors: true
          request:
            schema:
              application/json: ${file(models/update-session.json)}

  deleteSessionn:
    handler: src/sessions/deleteSession.handler
    events:
      - http:
          path: sessions/{id}
          method: delete
          cors: true

resources:
  - ${file(resources/tables.yml)}
  - ${file(resources/api-gateway-errors.yml)}

